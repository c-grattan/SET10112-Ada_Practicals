(* Module for defining a ref holding the value of variable "num" defined at flipdecrement.ads:10, created in Gnat2Why.Decls.Translate_Variable *)
module Flipdecrement__increment__num
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val num [model_trace:893] [model_projected]
  [name:num] [sloc:flipdecrement.ads:10]: int

end

(* Module for axiomatizing type "decary" defined at flipdecrement.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Flipdecrement__decary
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type decary  = <range 0 10>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 10
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = decary,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type decary__ref  = { mutable decary__content : decary }
  
  function   decary__ref_decary__content__projection (a : decary__ref)
    requires {  } ensures  {  } returns decary = a.decary__content
  
  meta model_projection function decary__ref_decary__content__projection
  
  meta inline:no function decary__ref_decary__content__projection
  
  function   decary__havoc (x : decary__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "decary" defined at flipdecrement.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Flipdecrement__decary___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Flipdecrement__decary
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_172) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_168) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_169) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_170) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_171) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_168) = True) \/
          (Flipdecrement__decary.first <= Flipdecrement__decary.last))
       then
       (Flipdecrement__decary.dynamic_property Flipdecrement__decary.first
          Flipdecrement__decary.last ([mlw:proxy_symbol]
          [introduced] temp___expr_172))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_173) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_174) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "num" defined at flipdecrement.ads:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Flipdecrement__increment__num___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "increment" defined at flipdecrement.ads:10, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Flipdecrement__increment__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Flipdecrement__increment__num
  use        Flipdecrement__decary
  use        Flipdecrement__decary___axiom
  use        Flipdecrement__decary___axiom
  use        Flipdecrement__increment__num___axiom
  
  function [GP_Subp:flipdecrement.ads:10] [sloc:flipdecrement.ads:10] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:flipdecrement.ads:12] ([GP_Reason:VC_POSTCONDITION]
                                   [GP_Shape:pragargs__cmp]
                                   [GP_Sloc:flipdecrement.ads:12:19]
                                   [model_vc_post]
                                   [comment:	  post => num = num'Old + 1;                   ^ flipdecrement.ads:12:19:VC_POSTCONDITION]
                                   [GP_Id:2] ([GP_Sloc:flipdecrement.ads:12:19]
                                             [GP_Pretty_Ada:958] (!Flipdecrement__increment__num.num
                                                                    = (
                                                                    --pp_tagged NOT IMPLEMENTED
                                                                    + 1))))) }
    returns
     = (* Assume dynamic invariants of inputs of the subprogram flipdecrement.ads:10 *);
        assume
        { (Flipdecrement__decary___axiom.dynamic_invariant
             !Flipdecrement__increment__num.num True False True True) };
        (* Assume moved pointers in outputs of the subprogram flipdecrement.ads:10 *);
        (* Check for RTE in the Pre of the subprogram flipdecrement.ads:10 *);
        abstract ensures
        { True } begin  (let _ = (!Flipdecrement__increment__num.num < 10) in
                       ())  end;
        (* Assume Pre of the subprogram flipdecrement.ads:10 *);
        assume
        { ([GP_Pretty_Ada:945] (!Flipdecrement__increment__num.num < 10)) };
        (let ([mlw:proxy_symbol] [introduced] temp___old_179) =
        !Flipdecrement__increment__num.num in (try
        ();
          ([GP_Sloc:flipdecrement.adb:14:21] ([sloc:flipdecrement.adb:14] (
                                             Flipdecrement__increment__num.num
                                             :=
                                             ( ([sloc:flipdecrement.adb:14] 
                                               ([GP_Shape:num_assign__add]
                                               [vc:annotation]
                                               [GP_Reason:VC_RANGE_CHECK]
                                               [GP_Id:1]
                                               [GP_Sloc:flipdecrement.adb:14:28]
                                               [comment:		num := num + 1;                            ^ flipdecrement.adb:14:28:VC_RANGE_CHECK] (
                                               Flipdecrement__decary.range_check_
                                                 (!Flipdecrement__increment__num.num
                                                    + 1))))))));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ =
                       (!Flipdecrement__increment__num.num
                          = (([mlw:proxy_symbol] [introduced] temp___old_179)
                               + 1))
                       in ())  end)

end
